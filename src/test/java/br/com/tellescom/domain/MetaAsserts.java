package br.com.tellescom.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MetaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetaAllPropertiesEquals(Meta expected, Meta actual) {
        assertMetaAutoGeneratedPropertiesEquals(expected, actual);
        assertMetaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetaAllUpdatablePropertiesEquals(Meta expected, Meta actual) {
        assertMetaUpdatableFieldsEquals(expected, actual);
        assertMetaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetaAutoGeneratedPropertiesEquals(Meta expected, Meta actual) {
        assertThat(expected)
            .as("Verify Meta auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetaUpdatableFieldsEquals(Meta expected, Meta actual) {
        assertThat(expected)
            .as("Verify Meta relevant properties")
            .satisfies(e -> assertThat(e.getDescricao()).as("check descricao").isEqualTo(actual.getDescricao()))
            .satisfies(e -> assertThat(e.getIndicador()).as("check indicador").isEqualTo(actual.getIndicador()))
            .satisfies(e -> assertThat(e.getMedicao()).as("check medicao").isEqualTo(actual.getMedicao()))
            .satisfies(e -> assertThat(e.getAcao()).as("check acao").isEqualTo(actual.getAcao()))
            .satisfies(e -> assertThat(e.getAvaliacaoResultado()).as("check avaliacaoResultado").isEqualTo(actual.getAvaliacaoResultado()))
            .satisfies(e -> assertThat(e.getIdProcesso()).as("check idProcesso").isEqualTo(actual.getIdProcesso()))
            .satisfies(e -> assertThat(e.getMonitoramento()).as("check monitoramento").isEqualTo(actual.getMonitoramento()))
            .satisfies(e -> assertThat(e.getPeriodo()).as("check periodo").isEqualTo(actual.getPeriodo()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMetaUpdatableRelationshipsEquals(Meta expected, Meta actual) {
        assertThat(expected)
            .as("Verify Meta relationships")
            .satisfies(e -> assertThat(e.getRecursos()).as("check recursos").isEqualTo(actual.getRecursos()))
            .satisfies(e -> assertThat(e.getMetaObjetivo()).as("check metaObjetivo").isEqualTo(actual.getMetaObjetivo()));
    }
}
